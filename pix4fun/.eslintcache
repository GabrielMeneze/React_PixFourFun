[{"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Home\\index.jsx":"1","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\UploadImagem\\index.jsx":"2","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Pagamento\\index.jsx":"3","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\components\\TrackingEvents\\index.js":"4"},{"size":10526,"mtime":1611254957940,"results":"5","hashOfConfig":"6"},{"size":10188,"mtime":1611254993130,"results":"7","hashOfConfig":"6"},{"size":2701,"mtime":1611251932089,"results":"8","hashOfConfig":"6"},{"size":697,"mtime":1611249305809,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"klvgq9",{"filePath":"12","messages":"13","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Home\\index.jsx",["19","20"],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\UploadImagem\\index.jsx",["21","22","23","24","25","26","27"],"// Fechar o crop como você fecha o input da frase\r\n\r\nimport React, { useState } from 'react';\r\nimport Header from '../../components/Header/index';\r\nimport Footer from '../../components/Footer/index';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Cropper from 'react-easy-crop';\r\nimport { Modal } from 'react-bootstrap';\r\nimport Home from '../Home/index.jsx'\r\nimport './index.css';\r\n\r\nconst UploadImagem = () => {\r\n\r\n    const [state, setState] = useState('')\r\n    const [contador, setContador] = useState(0)\r\n    const [des, setDes] = useState(-13)\r\n    const [crop, setCrop] = React.useState({ x: 0, y: 0 })\r\n    const [zoom, setZoom] = React.useState(1)\r\n    const [image, setImage] = React.useState(null)\r\n    const [bloco1, setBloco1] = React.useState(null)\r\n    const [croppedarea, setCroppedarea] = React.useState(null)\r\n    const [qtdImgs, setQntdItens] = React.useState(localStorage.getItem(\"produtoinCart\"))\r\n\r\n    console.log(qtdImgs)\r\n\r\n\r\n    const keys = qtdImgs.split('')\r\n\r\n    const limitFotos = () => {\r\n        var pack6 = 6;\r\n        var pack12 = 12;\r\n        var pack18 = 18;\r\n\r\n        if (keys[85] == 6) {\r\n            setContador(contador + pack6)\r\n            \r\n        }else if(keys[85] == 12){\r\n            setContador(contador + pack12);\r\n         }else{\r\n             setContador(contador + pack18);\r\n         }\r\n    }\r\n\r\n    console.log(keys)\r\n\r\n    console.log(limitFotos)\r\n\r\n    console.log(contador)\r\n\r\n    // Variaveis referentes aos botões\r\n    const [frase, setFrase] = useState('')\r\n    const [modalShow, setModalShow] = React.useState(false)\r\n\r\n    //Referencia o input no Botão escolher imagem\r\n    const inputEscolher = React.useRef();\r\n    const refbtnEscolher = () => inputEscolher.current.click();\r\n\r\n    //Referencia o input no Botão Cortar\r\n    const inputCortar = React.useRef();\r\n    const refCortar = () => inputCortar.current.click();\r\n\r\n    //Componente que define a area do crop\r\n    const onCropComplete = (cropPorcentagem, cropPixels) => {\r\n        setCroppedarea(cropPixels)\r\n        console.log(cropPorcentagem, croppedarea)\r\n    }\r\n\r\n    // Upa imagem para a api\r\n    const uparFrase = () => {\r\n        const fd = new FormData();\r\n        fd.append('FraseFoto', frase)\r\n        fetch('http://localhost:3000/api/Foto/FraseFoto', fd)\r\n            .then(res => {\r\n                console.log(res)\r\n            });\r\n    }\r\n\r\n    // componente que escolhe a imagem\r\n    const escolherImg = event => {\r\n        setState({\r\n            selectedFile: URL.createObjectURL(event.target.files[0])\r\n        })\r\n    }\r\n\r\n    // Upa imagem para a api\r\n    const uparImg = (event) => {\r\n        const fd = new FormData();\r\n        fd.append('FraseFoto', frase)\r\n        fetch('http://localhost:3000/api/Upload', fd)\r\n            .then(res => {\r\n                console.log(res)\r\n            });\r\n    }\r\n\r\n\r\n    // Componente que escolhe a imagem e o corta \r\n    const AbrirCrop = (event, props) => {\r\n        const reader = new FileReader();\r\n\r\n        if (event.target.files[0]) {\r\n            reader.readAsDataURL(event.target.files[0])\r\n            reader.addEventListener(\"load\", () => {\r\n                setImage(reader.result)\r\n            })\r\n        }\r\n    };\r\n\r\n    const Qtd = () => {\r\n        if (contador === 0) {\r\n            <p>Você não pode mais selecionar imagens</p>\r\n        } else {\r\n            setContador(contador + des);\r\n        }\r\n    }\r\n\r\n    // Define frase que acompanhará foto\r\n    function ModalFrase(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                style={{ fontFamily: \"Questrial\" }}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Frase da foto\r\n              </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>\r\n                        Digite sua frase abaixo\r\n                    </p>\r\n                    <input style={{ padding: \"0 5px\" }} value={frase} onChange={event => setFrase(event.target.frase)} type=\"text\" placeholder=\"Frase\" />\r\n                    <Button style={{ textTransform: \"none\", marginLeft: 5 }} type=\"submit\" onClick={uparFrase}>Enviar</Button>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Fechar</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"ContainerMain\">\r\n            <Header />\r\n            <div className=\"ContainerOne\">\r\n                <div className=\"ContainerA_Text\">\r\n                    <h2 className=\"textOne\">\r\n                        Agora é a hora de<br></br> nos enviar suas<br></br> fotos!\r\n          <span className=\"textGray\">Simples e <br></br>rápido.</span>\r\n                        <p>Selecione suas fotos favoritas, recorte<br></br>\r\n                            no formato em que deseja e clique e<br></br> enviar. Pronto!\r\n                            Receberemos um aviso e<br></br> suas fotos começarão a ser impressas.\r\n                        </p>\r\n                    </h2>\r\n                </div>\r\n                <div className=\"ContainerB_escolher\">\r\n                    <input\r\n                        href=\"#ContainerT\"\r\n                        type=\"file\"\r\n                        ref={inputEscolher}\r\n                        accept='image/*'\r\n                        onChange={escolherImg}\r\n                        onChange={limitFotos}\r\n                        onClick={() => setBloco1(true)}\r\n                        style={{ display: 'none' }}\r\n                    />\r\n                    <button\r\n                        className=\"Btn\"\r\n                        onClick={refbtnEscolher}\r\n                    >Escolher imagem</button>\r\n                </div>\r\n            </div>\r\n\r\n            <hr className=\"lin\" id=\"ContainerT\" />\r\n            {/* ----------------------------------------------Fim do 1°Container------------------------------------------------------ */}\r\n\r\n            <div className=\"ContainerTwo\">\r\n                <div className=\"container-cropper\" >\r\n                    {image ? (\r\n                        <>\r\n                            <div className='cropper'>\r\n                                <Cropper\r\n                                    image={image}\r\n                                    crop={crop}\r\n                                    zoom={zoom}\r\n                                    aspect={1}\r\n                                    onCropChange={setCrop}\r\n                                    onZoomChange={setZoom}\r\n                                    onCropComplete={onCropComplete}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className='slider'>\r\n                                <Slider\r\n                                    min={1}\r\n                                    max={6}\r\n                                    step={0.1}\r\n                                    value={zoom}\r\n                                    onChange={(e, zoom) => setZoom(zoom)}\r\n                                    color='secondary'\r\n                                />\r\n                            </div>\r\n\r\n                            {/* Salva e lista a imagem */}\r\n                            <Button\r\n                                className=\"Btn\"\r\n                                onClick={() => setImage(false)}\r\n                            >salvar imagem cortada </Button>\r\n                        </>\r\n                    ) : null}\r\n\r\n                </div>\r\n\r\n                <div className=\"blocos\">\r\n                    {bloco1 ? (\r\n                        <>\r\n                            <div className=\"bloco1\">\r\n                                <div className=\"imagem\">\r\n                                    <img src={state.selectedFile} />\r\n                                    {/* <div className=\"verification\"/> */}\r\n                                </div>\r\n                                <div className=\"container-buttons\">\r\n                                    <Button >Excluir</Button>\r\n\r\n                                    {/* Abre o crop de imagem */}\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        ref={inputCortar}\r\n                                        accept='image/*'\r\n                                        style={{ display: 'none' }}\r\n                                        onChange={AbrirCrop}\r\n                                        onClick={Qtd}\r\n                                    />\r\n                                    <Button\r\n                                        onClick={refCortar}\r\n                                    >Cortar</Button>\r\n\r\n                                    {/* Abre o input para a frase da foto */}\r\n                                    <Button\r\n                                        onClick={() => setModalShow(true)}>\r\n                                        Frase\r\n                                    </Button>\r\n                                    <ModalFrase\r\n                                        show={modalShow}\r\n                                        onHide={() => setModalShow(false)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"container-buttons botaosalvar\">\r\n\r\n                                {<p>Você ainda pode escolher {contador} imagens</p>}\r\n                                <Button className=\"btn\" type=\"submit\" onClick={uparImg}>Salvar e enviar</Button>\r\n                            </div>\r\n\r\n                        </>\r\n                    ) : null}\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"contact\" />\r\n            <div id=\"doubt\" />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\nexport default UploadImagem;\r\n\r\n\r\n","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Pagamento\\index.jsx",[],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\components\\TrackingEvents\\index.js",[],{"ruleId":"28","severity":1,"message":"29","line":1,"column":17,"nodeType":"30","messageId":"31","endLine":1,"endColumn":25},{"ruleId":"28","severity":1,"message":"32","line":4,"column":27,"nodeType":"30","messageId":"31","endLine":4,"endColumn":33},{"ruleId":"28","severity":1,"message":"33","line":10,"column":8,"nodeType":"30","messageId":"31","endLine":10,"endColumn":12},{"ruleId":"28","severity":1,"message":"34","line":17,"column":17,"nodeType":"30","messageId":"31","endLine":17,"endColumn":23},{"ruleId":"28","severity":1,"message":"35","line":23,"column":21,"nodeType":"30","messageId":"31","endLine":23,"endColumn":33},{"ruleId":"36","severity":1,"message":"37","line":35,"column":22,"nodeType":"38","messageId":"39","endLine":35,"endColumn":24},{"ruleId":"36","severity":1,"message":"37","line":38,"column":27,"nodeType":"38","messageId":"39","endLine":38,"endColumn":29},{"ruleId":"40","severity":1,"message":"41","line":168,"column":25,"nodeType":"42","endLine":168,"endColumn":46},{"ruleId":"43","severity":1,"message":"44","line":224,"column":37,"nodeType":"45","endLine":224,"endColumn":69},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Home' is defined but never used.","'setDes' is assigned a value but never used.","'setQntdItens' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]