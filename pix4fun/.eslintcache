[{"C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\UploadImagem\\index.jsx":"1","C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Pagamento\\index.jsx":"2","C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Carrinho\\index.jsx":"3","C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Home\\index.jsx":"4","C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\LoginCadastro\\index.jsx":"5","C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\index.js":"6"},{"size":13485,"mtime":1614580260104,"results":"7","hashOfConfig":"8"},{"size":2583,"mtime":1614035533010,"results":"9","hashOfConfig":"8"},{"size":6985,"mtime":1614562352985,"results":"10","hashOfConfig":"8"},{"size":12908,"mtime":1614035226250,"results":"11","hashOfConfig":"8"},{"size":6995,"mtime":1613968572220,"results":"12","hashOfConfig":"8"},{"size":944,"mtime":1613968572220,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"1clyjjo",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\UploadImagem\\index.jsx",["27","28","29","30","31","32","33","34","35","36","37","38","39","40"],"import React, { useState } from 'react';\r\nimport Header from '../../components/Header/index';\r\nimport Footer from '../../components/Footer/index';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Cropper from 'react-easy-crop';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport './index.css';\r\nimport { event, get } from 'jquery';\r\n\r\nconst UploadImagem = () => {\r\n    const [imagens, setImagens] = useState([])\r\n    const [imagenss, setImagenss] = useState([])\r\n    const [limitador, setLimitador] = useState(0)\r\n    const [des, setDes] = useState(-1)\r\n    const [li, setLi] = useState('oi')\r\n    const [container2, setContainer2] = React.useState(null)\r\n    const [image, setImage] = React.useState(null)\r\n    const [qtdImgs, setQntdItens] = React.useState(localStorage.getItem(\"produtoinCart\"))\r\n    const [frase, setFrase] = useState('')\r\n    const keys = qtdImgs.split(' ')\r\n    const [modalShow, setModalShow] = React.useState(false)\r\n    const [modalcrop, setModalcrop] = React.useState(false)\r\n\r\n    //Referencia o input no Botão escolher imagem\r\n    const inputEscolher = React.useRef();\r\n    const refbtnEscolher = () => inputEscolher.current.click();\r\n\r\n    //Referencia o input no Botão Cortar\r\n    const inputCortar = React.useRef();\r\n    const refCortar = () => inputCortar.current.click();\r\n\r\n    // Upa imagem para a api\r\n    const uparFrase = () => {\r\n        const fd = new FormData();\r\n        fd.append('FraseFoto', frase)\r\n        fetch('http://localhost:3000/api/Foto/FraseFoto', fd)\r\n            .then(res => {\r\n                console.log(res)\r\n            });\r\n    }\r\n\r\n    // componente que escolhe a imagem\r\n    const escolherImg = event => {\r\n\r\n        var pack6 = 5;\r\n        var pack12 = 11;\r\n        var pack18 = 17;\r\n\r\n        console.log(keys)\r\n        // Verificação para limitar quantidade de fotos escolhidas\r\n        if (limitador == 0 && li == 'oi') {\r\n            // seleciona a foto\r\n            imagens.push(URL.createObjectURL(event.target.files[0]))\r\n            setImagenss({\r\n                selected: imagenss\r\n            })\r\n            if (keys[2] == 6) {\r\n                setLimitador(limitador + pack6)\r\n            }\r\n            else if (keys[2] == 12) {\r\n                setLimitador(limitador + pack12);\r\n            }\r\n            else if (keys[2] == 18) {\r\n                setLimitador(limitador + pack18);\r\n            }\r\n        } else if (li == 'oi') {\r\n            imagens.push(URL.createObjectURL(event.target.files[0]))\r\n            setImagenss({\r\n                selected: imagenss\r\n            })\r\n\r\n            setLimitador(limitador + des)\r\n\r\n            if (limitador == 1) {\r\n                alert('Pronto! agora basta enviar as fotos')\r\n                setLi('hoje');\r\n            }\r\n        } else if (li == 'hoje') {\r\n            alert('voce não pode mais selecionar imagens')\r\n        }\r\n    }\r\n\r\n    // Upa imagem para a api\r\n    const uparImg = (event) => {\r\n        // if (limitador > 0) {\r\n        //     alert('você ainda pode selecionar mais fotos')\r\n        // } else {\r\n\r\n        const fd = new FormData();\r\n        fd.append('image', imagenss.selected)\r\n        fetch('http://localhost:3000/api/Foto', fd)\r\n            .then(res => {\r\n                console.log(res)\r\n            });\r\n\r\n\r\n\r\n        // }\r\n    }\r\n\r\n\r\n    function excluirImg(index) {\r\n        var i = 1\r\n        const list = Array.from(imagens)\r\n        list.splice(index, 1);\r\n\r\n        setImagens(list);\r\n        setLi('oi')\r\n        setLimitador(limitador + i);\r\n    }\r\n\r\n\r\n\r\n    function ModalCrop(props) {\r\n        //Componente que define a area do crop\r\n        const onCropComplete = (cropPixels) => {\r\n            setCroppedarea(cropPixels)\r\n            console.log(croppedarea)\r\n        }\r\n\r\n        // Componente que escolhe a imagem e o corta \r\n        const AbrirCrop = (event, props) => {\r\n\r\n            const reader = new FileReader();\r\n\r\n            if (event.target.files[0]) {\r\n                reader.readAsDataURL(event.target.files[0])\r\n                reader.addEventListener(\"load\", () => {\r\n                    setImage(reader.result)\r\n                })\r\n            }\r\n        };\r\n\r\n        const [crop, setCrop] = React.useState({ x: 0, y: 0 })\r\n        const [zoom, setZoom] = React.useState(1)\r\n        const [aspect, setAspect] = React.useState(0)\r\n        const [croppedarea, setCroppedarea] = React.useState(null)\r\n\r\n        function Dime3() {\r\n            setAspect({\r\n                asp: 0.9\r\n            })\r\n        }\r\n\r\n        function Dime2() {\r\n            setAspect({\r\n                asp: 2.1\r\n            })\r\n        }\r\n\r\n        function Dime1() {\r\n            setAspect({\r\n                asp: 1\r\n            })\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                style={{ fontFamily: \"Questrial\" }}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Recorte a imagem\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {image ? (\r\n                        <>\r\n                            <div className=\"btns\" >\r\n                                <Button onClick={Dime2}>Paisagem</Button>\r\n                                <Button onClick={Dime1}>Quadrado</Button>\r\n                                <Button onClick={Dime3}>Retrato</Button>\r\n                            </div>\r\n                            <div className=\"container-cropper\" >\r\n                                <div className='cropper'>\r\n                                    <Cropper\r\n                                        image={image}\r\n                                        crop={crop}\r\n                                        zoom={zoom}\r\n                                        aspect={aspect.asp}\r\n                                        onCropChange={setCrop}\r\n                                        onZoomChange={setZoom}\r\n                                        onCropComplete={onCropComplete}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className='slider'>\r\n                                    <Slider\r\n                                        min={1}\r\n                                        max={6}\r\n                                        step={0.1}\r\n                                        value={zoom}\r\n                                        onChange={(e, zoom) => setZoom(zoom)}\r\n                                        color='secondary'\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ) : null}\r\n\r\n                    <input\r\n                        type=\"file\"\r\n                        ref={inputCortar}\r\n                        accept='image/*'\r\n                        style={{ display: 'none' }}\r\n                        onChange={AbrirCrop}\r\n                    />\r\n                    <Button\r\n                        onClick={refCortar}\r\n                    >Escolher imagem a ser cortada</Button>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Fechar</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n\r\n    // Define frase que acompanhará foto\r\n    function ModalFrase(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                style={{ fontFamily: \"Questrial\" }}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Frase da foto\r\n              </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>\r\n                        Digite sua frase abaixo\r\n                    </p>\r\n                    <input style={{ padding: \"0 5px\" }} value={frase} onChange={event => setFrase(event.target.frase)} type=\"text\" placeholder=\"Frase\" />\r\n                    <Button style={{ textTransform: \"none\", marginLeft: 5 }} type=\"submit\" onClick={uparFrase}>Enviar</Button>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Fechar</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"ContainerMain\">\r\n            <Header />\r\n            <div className=\"ContainerOne\">\r\n                <div className=\"ContainerA_Text\">\r\n                    <h2 className=\"textOne\">\r\n                        Agora é a hora de<br></br> nos enviar suas<br></br> fotos!\r\n          <span className=\"textGray\">Simples e <br></br>rápido.</span>\r\n                        <p>Selecione suas fotos favoritas, recorte<br></br>\r\n                            no formato em que deseja e clique e<br></br> enviar. Pronto!\r\n                            Receberemos um aviso e<br></br> suas fotos começarão a ser impressas.\r\n                        </p>\r\n                    </h2>\r\n                </div>\r\n                <div className=\"ContainerB_escolher\">\r\n                    <input\r\n                        href=\"#ContainerT\"\r\n                        type=\"file\"\r\n                        ref={inputEscolher}\r\n                        accept='image/*'\r\n                        onChange={escolherImg}\r\n                        onClick={() => setContainer2(true)}\r\n                        style={{ display: 'none' }}\r\n                    />\r\n                    <button\r\n                        className=\"Btn\"\r\n                        onClick={refbtnEscolher}\r\n                    >Escolher imagem</button>\r\n                </div>\r\n            </div>\r\n\r\n            <hr className=\"lin\" id=\"ContainerT\" />\r\n            {/* ----------------------------------------------Fim do 1°Container------------------------------------------------------ */}\r\n            {container2 ? (\r\n                <>\r\n                    <div className=\"ContainerTwo\">\r\n\r\n                        <div className=\"container_bloco\">\r\n                            {imagens.map(item => {\r\n                                return (\r\n                                    <div className=\"bloco-imagem\">\r\n                                        <div className=\"imagem\">\r\n                                            {/* lista a imagem no bloco */}\r\n                                            <img src={item} />\r\n                                        </div>\r\n                                        <div className=\"container-buttons\">\r\n                                            {/* botão excluir */}\r\n                                            <Button onClick={() => excluirImg(item.id)} >Excluir</Button>\r\n\r\n                                            {/* Abre o cortar imagem */}\r\n                                            <Button\r\n                                                onClick={() => setModalcrop(true)}\r\n                                            >Cortar</Button>\r\n                                            <ModalCrop\r\n                                                show={modalcrop}\r\n                                                onHide={() => setModalcrop(false)}\r\n                                            />\r\n                                            {/* Abre o input para a frase da foto */}\r\n                                            <Button\r\n                                                onClick={() => setModalShow(true)}>\r\n                                                Frase\r\n                                    </Button>\r\n                                            <ModalFrase\r\n                                                show={modalShow}\r\n                                                onHide={() => setModalShow(false)}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        <div className=\"man\">\r\n                            <div className=\"container-subimit\">\r\n                                {<p>Você ainda pode escolher {limitador} imagens</p>}\r\n                                <div className=\"escolherdnv\">\r\n                                    <button\r\n                                        className=\"Btn\"\r\n                                        onClick={refbtnEscolher}\r\n                                    >ESCOLHER OUTRA IMAGEM</button>\r\n                                    <Link to=\"#\" className=\"Btn\"\r\n                                        onClick={uparImg} >SALVAR </Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            ) : null}\r\n\r\n            <div id=\"contact\" />\r\n            <div id=\"doubt\" />\r\n            <Footer />\r\n        </div >\r\n    )\r\n}\r\nexport default UploadImagem;\r\n\r\n\r\n","C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Pagamento\\index.jsx",["41","42","43","44"],"C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Carrinho\\index.jsx",["45","46","47","48","49"],"C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Home\\index.jsx",["50","51"],"C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\LoginCadastro\\index.jsx",["52"],"C:\\Users\\gabri\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\index.js",[],{"ruleId":"53","severity":1,"message":"54","line":8,"column":27,"nodeType":"55","messageId":"56","endLine":8,"endColumn":33},{"ruleId":"53","severity":1,"message":"57","line":10,"column":10,"nodeType":"55","messageId":"56","endLine":10,"endColumn":15},{"ruleId":"53","severity":1,"message":"58","line":10,"column":17,"nodeType":"55","messageId":"56","endLine":10,"endColumn":20},{"ruleId":"53","severity":1,"message":"59","line":16,"column":17,"nodeType":"55","messageId":"56","endLine":16,"endColumn":23},{"ruleId":"53","severity":1,"message":"60","line":20,"column":21,"nodeType":"55","messageId":"56","endLine":20,"endColumn":33},{"ruleId":"61","severity":1,"message":"62","line":53,"column":23,"nodeType":"63","messageId":"64","endLine":53,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":53,"column":34,"nodeType":"63","messageId":"64","endLine":53,"endColumn":36},{"ruleId":"61","severity":1,"message":"62","line":59,"column":25,"nodeType":"63","messageId":"64","endLine":59,"endColumn":27},{"ruleId":"61","severity":1,"message":"62","line":62,"column":30,"nodeType":"63","messageId":"64","endLine":62,"endColumn":32},{"ruleId":"61","severity":1,"message":"62","line":65,"column":30,"nodeType":"63","messageId":"64","endLine":65,"endColumn":32},{"ruleId":"61","severity":1,"message":"62","line":68,"column":23,"nodeType":"63","messageId":"64","endLine":68,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":76,"column":27,"nodeType":"63","messageId":"64","endLine":76,"endColumn":29},{"ruleId":"61","severity":1,"message":"62","line":80,"column":23,"nodeType":"63","messageId":"64","endLine":80,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":299,"column":45,"nodeType":"67","endLine":299,"endColumn":63},{"ruleId":"53","severity":1,"message":"68","line":1,"column":10,"nodeType":"55","messageId":"56","endLine":1,"endColumn":16},{"ruleId":"53","severity":1,"message":"69","line":2,"column":17,"nodeType":"55","messageId":"56","endLine":2,"endColumn":25},{"ruleId":"53","severity":1,"message":"70","line":5,"column":8,"nodeType":"55","messageId":"56","endLine":5,"endColumn":22},{"ruleId":"53","severity":1,"message":"71","line":38,"column":9,"nodeType":"55","messageId":"56","endLine":38,"endColumn":14},{"ruleId":"53","severity":1,"message":"72","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":14},{"ruleId":"53","severity":1,"message":"73","line":9,"column":24,"nodeType":"55","messageId":"56","endLine":9,"endColumn":37},{"ruleId":"53","severity":1,"message":"74","line":12,"column":24,"nodeType":"55","messageId":"56","endLine":12,"endColumn":37},{"ruleId":"53","severity":1,"message":"75","line":13,"column":24,"nodeType":"55","messageId":"56","endLine":13,"endColumn":32},{"ruleId":"53","severity":1,"message":"76","line":76,"column":9,"nodeType":"55","messageId":"56","endLine":76,"endColumn":23},{"ruleId":"53","severity":1,"message":"69","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"53","severity":1,"message":"54","line":4,"column":27,"nodeType":"55","messageId":"56","endLine":4,"endColumn":33},{"ruleId":"53","severity":1,"message":"77","line":82,"column":13,"nodeType":"55","messageId":"56","endLine":82,"endColumn":20},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'event' is defined but never used.","'get' is defined but never used.","'setDes' is assigned a value but never used.","'setQntdItens' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'encode' is defined but never used.","'useState' is defined but never used.","'TrackingEvents' is defined but never used.","'balde' is assigned a value but never used.","'Footer' is defined but never used.","'setListarImgs' is assigned a value but never used.","'setCartNumber' is assigned a value but never used.","'setFrete' is assigned a value but never used.","'descontoEcusto' is assigned a value but never used.","'usuario' is assigned a value but never used."]