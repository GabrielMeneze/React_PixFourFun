[{"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\index.js":"1","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Home\\index.jsx":"2","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\components\\Footer\\index.jsx":"3","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\UploadImagem\\index.jsx":"4"},{"size":847,"mtime":1608611529665,"results":"5","hashOfConfig":"6"},{"size":6994,"mtime":1608261062037,"results":"7","hashOfConfig":"6"},{"size":3271,"mtime":1608002570568,"results":"8","hashOfConfig":"6"},{"size":10097,"mtime":1608748262257,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"klvgq9",{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\index.js",[],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Home\\index.jsx",["19","20","21"],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\components\\Footer\\index.jsx",["22","23"],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\UploadImagem\\index.jsx",["24","25","26","27","28","29","30","31","32","33","34"],"import React, { useState } from 'react';\r\nimport Header from '../../components/Header/index';\r\nimport Footer from '../../components/Footer/index';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Cropper from 'react-easy-crop';\r\nimport { url } from '../../utils/constants'\r\nimport { Modal, Form } from 'react-bootstrap';\r\n\r\nimport './index.css';\r\nimport { render } from '@testing-library/react';\r\n\r\nconst UploadImagem = () => {\r\n    const [state, setState] = useState('')\r\n    const [image, setImage] = React.useState(null)\r\n    const [fechar, setFechar] = useState(true)\r\n    const [frase, setFrase] = useState('')\r\n    const [croppedarea, setCroppedarea] = React.useState(null)\r\n    const [crop, setCrop] = React.useState({ x: 0, y: 0 })\r\n    const [zoom, setZoom] = React.useState(1)\r\n    const [contador, setContador] = useState(0);\r\n    const [desContador, setDescontador] = useState(18);\r\n\r\n    const [bloco, setBloco] = useState(true)\r\n\r\n\r\n    //Referencia o input no Botão escolher imagem\r\n    const inputEscolher = React.useRef();\r\n    const refbtnEscolher = () => inputEscolher.current.click();\r\n\r\n    //Referencia o input no Botão Cortar\r\n    const inputCortar = React.useRef();\r\n    const SelectPopUp = () => inputCortar.current.click();\r\n\r\n    // Referencia o input no Botão Frase\r\n    const inputFrase = React.useRef();\r\n    const Frase = () => inputFrase.current.click();\r\n\r\n    //Componente que define a area do crop\r\n    const onCropComplete = (cropPorcentagem, cropPixels) => {\r\n        console.log(cropPorcentagem, cropPixels);\r\n        setCroppedarea(cropPixels)\r\n    }\r\n\r\n    //Seleciona imagem\r\n    const escolherImg = (event) => {\r\n        setState({\r\n            selectedFile: URL.createObjectURL(event.target.files[0])\r\n        })\r\n        console.log(event)\r\n    }\r\n\r\n\r\n\r\n    const aparecerBloco = () => {\r\n        if (bloco == true) {\r\n            return\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // Upa imagem para a api\r\n    const uparImg = async e => {\r\n\r\n        const fd = new FormData();\r\n        fd.append('image', state.selectedFile)\r\n        fetch('http://localhost:5000/api/Foto', fd)\r\n            .then(res => {\r\n                console.log(res)\r\n            });\r\n    }\r\n\r\n    // Componente que escolhe arquivo, e o corta \r\n    const AbrirCrop = (event) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(event.target.files[0])\r\n        reader.addEventListener(\"load\", () => {\r\n            setImage(reader.result)\r\n        })\r\n        console.log(event)\r\n    };\r\n\r\n\r\n\r\n    // Fecha o crop\r\n    const CloseCrop = () => {\r\n        setImage({\r\n            fecharcrop: null\r\n        })\r\n    }\r\n\r\n\r\n    //Mostra a quantidade de imagens selecionadas\r\n    function AddContador() {\r\n        setContador(contador + 1)\r\n        setDescontador(desContador - 1)\r\n    }\r\n\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n\r\n    function ModalFrase(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                style={{ fontFamily: \"Questrial\" }}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Frase da foto\r\n              </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>\r\n                        Digite sua frase abaixo\r\n                    </p>\r\n                    <Form onSubmit={event => (event)}></Form>\r\n                    <input style={{ padding: \"0 5px\"}} value={frase} onChange={event => setFrase(event.target.frase)} type=\"text\" placeholder=\"Frase\"/>\r\n                    <Button style={{ textTransform: \"none\", marginLeft: 5}} type=\"submit\">Enviar</Button>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Fechar</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"ContainerMain\">\r\n            <Header />\r\n            <div className=\"ContainerOne\">\r\n                <div className=\"ContainerTextOne\">\r\n                    <h2 className=\"textOne\">\r\n                        Agora é a hora de<br></br> nos enviar suas<br></br> fotos!\r\n          <span className=\"textGray\">Simples e <br></br>rápido.</span>\r\n                        <p>Selecione suas fotos favoritas, recorte<br></br>\r\n                            no formato em que deseja e clique e<br></br> enviar. Pronto!\r\n                            Receberemos um aviso e<br></br> suas fotos começarão a ser impressas.\r\n                        </p>\r\n                    </h2>\r\n                </div>\r\n                <div className=\"ContainerBtn\">\r\n                    <input\r\n                        type=\"file\"\r\n                        ref={inputEscolher}\r\n                        accept='image/*'\r\n                        onChange={escolherImg}\r\n                        style={{ display: 'none' }}\r\n                        onClick={AddContador}\r\n                    />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={refbtnEscolher}\r\n                    >Escolher</Button>\r\n                </div>\r\n            </div>\r\n            <hr className=\"linha\" />\r\n\r\n            {/* ----------------------------------------------Fim do 1°Container------------------------------------------------------ */}\r\n\r\n            <div className=\"ContainerTwo\">\r\n                <div className=\"Contador\">\r\n                    <h3>Você selecionou: {contador} imagens, ainda pode selecionar {desContador}</h3>\r\n                </div>\r\n                <div className=\"container-cropper\">\r\n                    {image ? (\r\n                        <>\r\n                            <div className='cropper'>\r\n                                {/* Define area a ser cortada */}\r\n                                <Cropper\r\n                                    image={image}\r\n                                    crop={crop}\r\n                                    zoom={zoom}\r\n                                    aspect={1}\r\n                                    onCropChange={setCrop}\r\n                                    onZoomChange={setZoom}\r\n                                    onCropComplete={onCropComplete}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className='slider'>\r\n                                {/* Define o zoom */}\r\n                                <Slider\r\n                                    min={1}\r\n                                    max={3}\r\n                                    step={0.1}\r\n                                    value={zoom}\r\n                                    onChange={(e, zoom) => setZoom(zoom)}\r\n                                    color='secondary'\r\n                                />\r\n                            </div>\r\n                            {/* Botão para escolher outra imagem para realizar o crop */}\r\n                            <input\r\n                                type=\"file\"\r\n                                ref={inputEscolher}\r\n                                accept='image/*'\r\n                                onChange={AbrirCrop}\r\n                                style={{ display: 'none' }}\r\n                            />\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                onClick={refbtnEscolher}\r\n                            >Escolher outra imagem</Button>\r\n                            {/* Botão para subir imagem para a api */}\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                className=\"BtnChoseFile\"\r\n                                onClick={uparImg}\r\n                            >salvar</Button>\r\n\r\n                        </>\r\n                    ) : null}\r\n\r\n\r\n\r\n                    <div className=\"itensTable\">\r\n                        <div className=\"imagem\">\r\n                            <img src={state.selectedFile} />\r\n                        </div>\r\n                        <div className=\"container-buttons\">\r\n\r\n                            <Button variant=\"contained\">Excluir</Button>\r\n\r\n                            <input\r\n                                type=\"file\"\r\n                                ref={inputCortar}\r\n                                accept='image/*'\r\n                                style={{ display: 'none' }}\r\n                                onChange={AbrirCrop}\r\n                                onClick={AddContador}\r\n                            />\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                onClick={SelectPopUp}\r\n                            >Cortar</Button>\r\n\r\n\r\n\r\n                            <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n                                Frase\r\n                            </Button>\r\n\r\n                            <ModalFrase\r\n                                show={modalShow}\r\n                                onHide={() => setModalShow(false)}\r\n                            />\r\n                            {/* <input\r\n                                type=\"text\"\r\n                                ref={inputFrase}\r\n                                placeholder=\"Coloque uma frase\"\r\n                                style={{ display: 'none' }}\r\n                            />\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                onClick={handleShow()}\r\n\r\n                            >Frase</Button> */}\r\n                        </div>\r\n                    </div>\r\n                    <hr />\r\n\r\n\r\n                </div>\r\n            </div>\r\n            <Footer id=\"rodape\" />\r\n        </div>\r\n    )\r\n}\r\nexport default UploadImagem;\r\n\r\n\r\n",{"ruleId":"35","severity":1,"message":"36","line":4,"column":27,"nodeType":"37","messageId":"38","endLine":4,"endColumn":33},{"ruleId":"35","severity":1,"message":"39","line":4,"column":41,"nodeType":"37","messageId":"38","endLine":4,"endColumn":47},{"ruleId":"35","severity":1,"message":"40","line":4,"column":49,"nodeType":"37","messageId":"38","endLine":4,"endColumn":54},{"ruleId":"35","severity":1,"message":"41","line":2,"column":10,"nodeType":"37","messageId":"38","endLine":2,"endColumn":14},{"ruleId":"35","severity":1,"message":"42","line":15,"column":9,"nodeType":"37","messageId":"38","endLine":15,"endColumn":20},{"ruleId":"35","severity":1,"message":"43","line":7,"column":10,"nodeType":"37","messageId":"38","endLine":7,"endColumn":13},{"ruleId":"35","severity":1,"message":"44","line":11,"column":10,"nodeType":"37","messageId":"38","endLine":11,"endColumn":16},{"ruleId":"35","severity":1,"message":"45","line":16,"column":12,"nodeType":"37","messageId":"38","endLine":16,"endColumn":18},{"ruleId":"35","severity":1,"message":"46","line":16,"column":20,"nodeType":"37","messageId":"38","endLine":16,"endColumn":29},{"ruleId":"35","severity":1,"message":"47","line":18,"column":12,"nodeType":"37","messageId":"38","endLine":18,"endColumn":23},{"ruleId":"35","severity":1,"message":"48","line":24,"column":19,"nodeType":"37","messageId":"38","endLine":24,"endColumn":27},{"ruleId":"35","severity":1,"message":"49","line":37,"column":11,"nodeType":"37","messageId":"38","endLine":37,"endColumn":16},{"ruleId":"35","severity":1,"message":"50","line":55,"column":11,"nodeType":"37","messageId":"38","endLine":55,"endColumn":24},{"ruleId":"51","severity":1,"message":"52","line":56,"column":19,"nodeType":"53","messageId":"54","endLine":56,"endColumn":21},{"ruleId":"35","severity":1,"message":"55","line":87,"column":11,"nodeType":"37","messageId":"38","endLine":87,"endColumn":20},{"ruleId":"56","severity":1,"message":"57","line":222,"column":29,"nodeType":"58","endLine":222,"endColumn":61},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","'Form' is defined but never used.","'enviarEmail' is assigned a value but never used.","'url' is defined but never used.","'render' is defined but never used.","'fechar' is assigned a value but never used.","'setFechar' is assigned a value but never used.","'croppedarea' is assigned a value but never used.","'setBloco' is assigned a value but never used.","'Frase' is assigned a value but never used.","'aparecerBloco' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CloseCrop' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]