[{"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\reportWebVitals.js":"1","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Carrinho\\index.jsx":"2","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\UploadImagem\\index.jsx":"3","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\index.js":"4","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Pagamento\\index.jsx":"5"},{"size":375,"mtime":1611800954659,"results":"6","hashOfConfig":"7"},{"size":6832,"mtime":1613093052467,"results":"8","hashOfConfig":"7"},{"size":13210,"mtime":1613136839383,"results":"9","hashOfConfig":"7"},{"size":944,"mtime":1611927916968,"results":"10","hashOfConfig":"7"},{"size":2043,"mtime":1612920236770,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"klvgq9",{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\reportWebVitals.js",[],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Carrinho\\index.jsx",["23","24","25"],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\UploadImagem\\index.jsx",["26","27","28","29","30","31","32","33","34","35","36","37","38","39"],"import React, { useState } from 'react';\r\nimport Header from '../../components/Header/index';\r\nimport Footer from '../../components/Footer/index';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Cropper from 'react-easy-crop';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport './index.css';\r\nimport { event, get } from 'jquery';\r\n\r\nconst UploadImagem = () => {\r\n    const [imagens, setImagens] = useState([])\r\n    const [limitador, setLimitador] = useState(0)\r\n    const [des, setDes] = useState(-1)\r\n    const [li, setLi] = useState('oi')\r\n    const [container2, setContainer2] = React.useState(null)\r\n    const [image, setImage] = React.useState(null)\r\n    const [qtdImgs, setQntdItens] = React.useState(localStorage.getItem(\"produtoinCart\"))\r\n    const [frase, setFrase] = useState('')\r\n    const keys = qtdImgs.split(' ')\r\n    const [modalShow, setModalShow] = React.useState(false)\r\n    const [modalcrop, setModalcrop] = React.useState(false)\r\n\r\n    //Referencia o input no Botão escolher imagem\r\n    const inputEscolher = React.useRef();\r\n    const refbtnEscolher = () => inputEscolher.current.click();\r\n\r\n    //Referencia o input no Botão Cortar\r\n    const inputCortar = React.useRef();\r\n    const refCortar = () => inputCortar.current.click();\r\n\r\n    // Upa imagem para a api\r\n    const uparFrase = () => {\r\n        const fd = new FormData();\r\n        fd.append('FraseFoto', frase)\r\n        fetch('http://localhost:3000/api/Foto/FraseFoto', fd)\r\n            .then(res => {\r\n                console.log(res)\r\n            });\r\n    }\r\n\r\n    // componente que escolhe a imagem\r\n    const escolherImg = event => {\r\n\r\n        var pack6 = 5;\r\n        var pack12 = 11;\r\n        var pack18 = 17;\r\n\r\n        console.log(keys)\r\n        // Verificação para limitar quantidade de fotos escolhidas\r\n        if (limitador == 0 && li == 'oi') {\r\n            // seleciona a foto\r\n            imagens.push(URL.createObjectURL(event.target.files[0]))\r\n            console.log(imagens)\r\n            if (keys[6] == 6) {\r\n                setLimitador(limitador + pack6)\r\n            }\r\n            else if (keys[6] == 12) {\r\n                setLimitador(limitador + pack12);\r\n            }\r\n            else if (keys[6] == 18) {\r\n                setLimitador(limitador + pack18);\r\n            }\r\n        } else if (li == 'oi') {\r\n            imagens.push(URL.createObjectURL(event.target.files[0]))\r\n\r\n            setLimitador(limitador + des)\r\n\r\n            if (limitador == 1) {\r\n                alert('Pronto! agora basta enviar as fotos')\r\n                setLi('hoje');\r\n            }\r\n        } else if (li == 'hoje') {\r\n            alert('voce não pode mais selecionar imagens')\r\n        }\r\n    }\r\n\r\n    // Upa imagem para a api\r\n    const uparImg = (event) => {\r\n        if (limitador > 0) {\r\n            alert('você ainda pode selecionar mais fotos')\r\n        } else {\r\n            const fd = new FormData();\r\n            fd.append('image', imagens)\r\n            fetch('http://localhost:5000/api/Foto', fd)\r\n                .then(res => {\r\n                    console.log(res)\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    function excluirImg(target, index) {\r\n        var i = 1\r\n        const list = Array.from(imagens)\r\n        list.splice(index, 1);\r\n\r\n        setImagens(list);\r\n        setLi('oi')\r\n        setLimitador(limitador + i);\r\n    }\r\n\r\n    function ModalCrop(props) {\r\n        //Componente que define a area do crop\r\n        const onCropComplete = (cropPorcentagem, cropPixels) => {\r\n            setCroppedarea(cropPixels)\r\n            console.log(cropPorcentagem, croppedarea)\r\n        }\r\n\r\n        // Componente que escolhe a imagem e o corta \r\n        const AbrirCrop = (event, props) => {\r\n\r\n            const reader = new FileReader();\r\n\r\n            if (event.target.files[0]) {\r\n                reader.readAsDataURL(event.target.files[0])\r\n                reader.addEventListener(\"load\", () => {\r\n                    setImage(reader.result)\r\n                })\r\n            }\r\n        };\r\n\r\n        const [crop, setCrop] = React.useState({ x: 0, y: 0 })\r\n        const [zoom, setZoom] = React.useState(1)\r\n        const [aspect, setAspect] = React.useState(1)\r\n        const [croppedarea, setCroppedarea] = React.useState(null)\r\n\r\n        function Dime3() {\r\n            setAspect({\r\n                asp: 0.9\r\n            })\r\n         }\r\n\r\n        function Dime2() {\r\n           setAspect({\r\n               asp: 2.1\r\n           })\r\n        }\r\n\r\n        function Dime1() {\r\n            setAspect({\r\n                asp: 1\r\n            })\r\n         }\r\n\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                style={{ fontFamily: \"Questrial\" }}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Recorte a imagem\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {image ? (\r\n                        <>\r\n                            <div className=\"container-cropper\" >\r\n                                <div className='cropper'>\r\n                                    <Cropper\r\n                                        image={imagens}\r\n                                        crop={crop}\r\n                                        zoom={zoom}\r\n                                        aspect={aspect.asp}\r\n                                        onCropChange={setCrop}\r\n                                        onZoomChange={setZoom}\r\n                                        onCropComplete={onCropComplete}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className='slider'>\r\n                                    <Slider\r\n                                        min={1}\r\n                                        max={6}\r\n                                        step={0.1}\r\n                                        value={zoom}\r\n                                        onChange={(e, zoom) => setZoom(zoom)}\r\n                                        color='secondary'\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ) : null}\r\n                    <Button onClick={Dime2}>Paisagem</Button>\r\n                    <Button onClick={Dime1}>Quadrado</Button>\r\n                    <Button onClick={Dime3}>Retrato</Button>\r\n                    <input\r\n                        type=\"file\"\r\n                        ref={inputCortar}\r\n                        accept='image/*'\r\n                        style={{ display: 'none' }}\r\n                        onChange={AbrirCrop}\r\n                    />\r\n                    <Button\r\n                        onClick={refCortar}\r\n                    >Cortar</Button>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Fechar</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n\r\n    // Define frase que acompanhará foto\r\n    function ModalFrase(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                style={{ fontFamily: \"Questrial\" }}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Frase da foto\r\n              </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>\r\n                        Digite sua frase abaixo\r\n                    </p>\r\n                    <input style={{ padding: \"0 5px\" }} value={frase} onChange={event => setFrase(event.target.frase)} type=\"text\" placeholder=\"Frase\" />\r\n                    <Button style={{ textTransform: \"none\", marginLeft: 5 }} type=\"submit\" onClick={uparFrase}>Enviar</Button>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Fechar</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"ContainerMain\">\r\n            <Header />\r\n            <div className=\"ContainerOne\">\r\n                <div className=\"ContainerA_Text\">\r\n                    <h2 className=\"textOne\">\r\n                        Agora é a hora de<br></br> nos enviar suas<br></br> fotos!\r\n          <span className=\"textGray\">Simples e <br></br>rápido.</span>\r\n                        <p>Selecione suas fotos favoritas, recorte<br></br>\r\n                            no formato em que deseja e clique e<br></br> enviar. Pronto!\r\n                            Receberemos um aviso e<br></br> suas fotos começarão a ser impressas.\r\n                        </p>\r\n                    </h2>\r\n                </div>\r\n                <div className=\"ContainerB_escolher\">\r\n                    <input\r\n                        href=\"#ContainerT\"\r\n                        type=\"file\"\r\n                        ref={inputEscolher}\r\n                        accept='image/*'\r\n                        onChange={escolherImg}\r\n                        onClick={() => setContainer2(true)}\r\n                        style={{ display: 'none' }}\r\n                    />\r\n                    <button\r\n                        className=\"Btn\"\r\n                        onClick={refbtnEscolher}\r\n                    >Escolher imagem</button>\r\n                </div>\r\n            </div>\r\n\r\n            <hr className=\"lin\" id=\"ContainerT\" />\r\n            {/* ----------------------------------------------Fim do 1°Container------------------------------------------------------ */}\r\n            {container2 ? (\r\n                <>\r\n                    <div className=\"ContainerTwo\">\r\n\r\n                        <div className=\"container_bloco\">\r\n                            {imagens.map(item => {\r\n                                return (\r\n                                    <div className=\"bloco-imagem\">\r\n                                        <div className=\"imagem\">\r\n                                            {/* lista a imagem no bloco */}\r\n                                            <img src={item} />\r\n                                        </div>\r\n                                        <div className=\"container-buttons\">\r\n                                            {/* botão excluir */}\r\n                                            <Button onClick={() => excluirImg(item.id)} >Excluir</Button>\r\n\r\n                                            {/* Abre o cortar imagem */}\r\n                                            <Button\r\n                                                onClick={() => setModalcrop(true)}\r\n                                            >Cortar</Button>\r\n                                            <ModalCrop\r\n                                                show={modalcrop}\r\n                                                onHide={() => setModalcrop(false)}\r\n                                            />\r\n                                            {/* Abre o input para a frase da foto */}\r\n                                            <Button\r\n                                                onClick={() => setModalShow(true)}>\r\n                                                Frase\r\n                                    </Button>\r\n                                            <ModalFrase\r\n                                                show={modalShow}\r\n                                                onHide={() => setModalShow(false)}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        <div className=\"man\">\r\n                            <div className=\"container-subimit\">\r\n                                {<p>Você ainda pode escolher {limitador} imagens</p>}\r\n                                <div className=\"escolherdnv\">\r\n                                    <button\r\n                                        className=\"Btn\"\r\n                                        onClick={refbtnEscolher}\r\n                                    >ESCOLHER OUTRA IMAGEM</button>\r\n                                    <Link to=\"/Carrinho\" className=\"Btn\"\r\n                                        onClick={uparImg} >SALVAR E ENVIAR</Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            ) : null}\r\n\r\n            <div id=\"contact\" />\r\n            <div id=\"doubt\" />\r\n            <Footer />\r\n        </div >\r\n    )\r\n}\r\nexport default UploadImagem;\r\n\r\n\r\n","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\index.js",[],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Pagamento\\index.jsx",[],{"ruleId":"40","severity":1,"message":"41","line":9,"column":24,"nodeType":"42","messageId":"43","endLine":9,"endColumn":37},{"ruleId":"40","severity":1,"message":"44","line":11,"column":24,"nodeType":"42","messageId":"43","endLine":11,"endColumn":37},{"ruleId":"40","severity":1,"message":"45","line":12,"column":24,"nodeType":"42","messageId":"43","endLine":12,"endColumn":32},{"ruleId":"40","severity":1,"message":"46","line":8,"column":27,"nodeType":"42","messageId":"43","endLine":8,"endColumn":33},{"ruleId":"40","severity":1,"message":"47","line":10,"column":10,"nodeType":"42","messageId":"43","endLine":10,"endColumn":15},{"ruleId":"40","severity":1,"message":"48","line":10,"column":17,"nodeType":"42","messageId":"43","endLine":10,"endColumn":20},{"ruleId":"40","severity":1,"message":"49","line":15,"column":17,"nodeType":"42","messageId":"43","endLine":15,"endColumn":23},{"ruleId":"40","severity":1,"message":"50","line":19,"column":21,"nodeType":"42","messageId":"43","endLine":19,"endColumn":33},{"ruleId":"51","severity":1,"message":"52","line":52,"column":23,"nodeType":"53","messageId":"54","endLine":52,"endColumn":25},{"ruleId":"51","severity":1,"message":"52","line":52,"column":34,"nodeType":"53","messageId":"54","endLine":52,"endColumn":36},{"ruleId":"51","severity":1,"message":"52","line":56,"column":25,"nodeType":"53","messageId":"54","endLine":56,"endColumn":27},{"ruleId":"51","severity":1,"message":"52","line":59,"column":30,"nodeType":"53","messageId":"54","endLine":59,"endColumn":32},{"ruleId":"51","severity":1,"message":"52","line":62,"column":30,"nodeType":"53","messageId":"54","endLine":62,"endColumn":32},{"ruleId":"51","severity":1,"message":"52","line":65,"column":23,"nodeType":"53","messageId":"54","endLine":65,"endColumn":25},{"ruleId":"51","severity":1,"message":"52","line":70,"column":27,"nodeType":"53","messageId":"54","endLine":70,"endColumn":29},{"ruleId":"51","severity":1,"message":"52","line":74,"column":23,"nodeType":"53","messageId":"54","endLine":74,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":284,"column":45,"nodeType":"57","endLine":284,"endColumn":63},"no-unused-vars","'setListarImgs' is assigned a value but never used.","Identifier","unusedVar","'setCartNumber' is assigned a value but never used.","'setFrete' is assigned a value but never used.","'Router' is defined but never used.","'event' is defined but never used.","'get' is defined but never used.","'setDes' is assigned a value but never used.","'setQntdItens' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]