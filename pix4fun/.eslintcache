[{"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Home\\index.jsx":"1","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\UploadImagem\\index.jsx":"2","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\index.js":"3","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Pagamento\\index.jsx":"4","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\reportWebVitals.js":"5","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\components\\TrackingEvents\\index.js":"6","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Carrinho\\index.jsx":"7","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\components\\Header\\index.jsx":"8","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\LoginCadastro\\index.jsx":"9","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\components\\Footer\\index.jsx":"10"},{"size":10523,"mtime":1611801014080,"results":"11","hashOfConfig":"12"},{"size":10566,"mtime":1611889271228,"results":"13","hashOfConfig":"12"},{"size":952,"mtime":1611800954638,"results":"14","hashOfConfig":"12"},{"size":3706,"mtime":1611803933184,"results":"15","hashOfConfig":"12"},{"size":375,"mtime":1611800954659,"results":"16","hashOfConfig":"12"},{"size":697,"mtime":1611800954633,"results":"17","hashOfConfig":"12"},{"size":3972,"mtime":1611801014079,"results":"18","hashOfConfig":"12"},{"size":4681,"mtime":1611872472957,"results":"19","hashOfConfig":"12"},{"size":6971,"mtime":1611800954652,"results":"20","hashOfConfig":"12"},{"size":2886,"mtime":1611918775653,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"klvgq9",{"filePath":"24","messages":"25","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Home\\index.jsx",["43","44"],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\UploadImagem\\index.jsx",["45","46","47","48","49","50","51","52","53","54","55"],"// Fechar o crop como você fecha o input da frase\r\n\r\nimport React, { useState } from 'react';\r\nimport Header from '../../components/Header/index';\r\nimport Footer from '../../components/Footer/index';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Cropper from 'react-easy-crop';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport './index.css';\r\n\r\nconst UploadImagem = () => {\r\n\r\n    const [state, setState] = useState('')\r\n    const [limitador, setLimitador] = useState(0)\r\n    const [des, setDes] = useState(-1)\r\n    const [crop, setCrop] = React.useState({ x: 0, y: 0 })\r\n    const [zoom, setZoom] = React.useState(1)\r\n    const [image, setImage] = React.useState(null)\r\n    const [bloco1, setBloco1] = React.useState(null)\r\n    const [croppedarea, setCroppedarea] = React.useState(null)\r\n    const [qtdImgs, setQntdItens] = React.useState(localStorage.getItem(\"produtoinCart\"))\r\n\r\n    const keys = qtdImgs.split(' ')\r\n\r\n    console.log(keys)\r\n\r\n\r\n    // Variaveis referentes aos botões\r\n    const [frase, setFrase] = useState('')\r\n    const [modalShow, setModalShow] = React.useState(false)\r\n\r\n    //Referencia o input no Botão escolher imagem\r\n    const inputEscolher = React.useRef();\r\n    const refbtnEscolher = () => inputEscolher.current.click();\r\n\r\n    //Referencia o input no Botão Cortar\r\n    const inputCortar = React.useRef();\r\n    const refCortar = () => inputCortar.current.click();\r\n\r\n    //Referencia o limitador de fotos\r\n    const inputLimit = React.useRef();\r\n    const refLimit = () => inputLimit.current.click();\r\n\r\n    //Componente que define a area do crop\r\n    const onCropComplete = (cropPorcentagem, cropPixels) => {\r\n        setCroppedarea(cropPixels)\r\n        console.log(cropPorcentagem, croppedarea)\r\n    }\r\n\r\n    // Upa imagem para a api\r\n    const uparFrase = () => {\r\n        const fd = new FormData();\r\n        fd.append('FraseFoto', frase)\r\n        fetch('http://localhost:3000/api/Foto/FraseFoto', fd)\r\n            .then(res => {\r\n                console.log(res)\r\n            });\r\n    }\r\n\r\n    // componente que escolhe a imagem\r\n    const escolherImg = event => {\r\n\r\n        var pack6 = 5;\r\n        var pack12 = 11;\r\n        var pack18 = 17;\r\n\r\n        // Verificação para limitar quantidade de fotos escolhidas\r\n        if (limitador == 0) {\r\n            // seleciona a foto\r\n            setState({\r\n                selectedFile: URL.createObjectURL(event.target.files[0])\r\n            })\r\n            if (keys[6] == 6) {\r\n                setLimitador(limitador + pack6)\r\n            }\r\n            else if (keys[6] == 12) {\r\n                setLimitador(limitador + pack12);\r\n            }\r\n            else if (keys[6] == 18) {\r\n                setLimitador(limitador + pack18);\r\n            }\r\n        } else {\r\n            setState({\r\n                selectedFile: URL.createObjectURL(event.target.files[0])\r\n            })\r\n            setLimitador(limitador + des)\r\n            if (limitador == 1) {\r\n                alert('Pronto! agora basta enviar as fotos')\r\n            }\r\n        }\r\n    }\r\n\r\n    // Upa imagem para a api\r\n    const uparImg = (event) => {\r\n        if (limitador > 0) {\r\n            alert('você ainda pode selecionar mais fotos')\r\n            setLimitador(limitador == -1)\r\n        } else {\r\n            const fd = new FormData();\r\n            fd.append('FraseFoto', frase)\r\n            fetch('http://localhost:3000/api/Upload', fd)\r\n                .then(res => {\r\n                    console.log(res)\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    // Componente que escolhe a imagem e o corta \r\n    const AbrirCrop = (event, props) => {\r\n        const reader = new FileReader();\r\n\r\n        if (event.target.files[0]) {\r\n            reader.readAsDataURL(event.target.files[0])\r\n            reader.addEventListener(\"load\", () => {\r\n                setImage(reader.result)\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n// Define frase que acompanhará foto\r\nfunction ModalFrase(props) {\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            style={{ fontFamily: \"Questrial\" }}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Frase da foto\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>\r\n                    Digite sua frase abaixo\r\n                    </p>\r\n                <input style={{ padding: \"0 5px\" }} value={frase} onChange={event => setFrase(event.target.frase)} type=\"text\" placeholder=\"Frase\" />\r\n                <Button style={{ textTransform: \"none\", marginLeft: 5 }} type=\"submit\" onClick={uparFrase}>Enviar</Button>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Fechar</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nreturn (\r\n\r\n    <div className=\"ContainerMain\">\r\n        <Header />\r\n        <div className=\"ContainerOne\">\r\n            <div className=\"ContainerA_Text\">\r\n                <h2 className=\"textOne\">\r\n                    Agora é a hora de<br></br> nos enviar suas<br></br> fotos!\r\n          <span className=\"textGray\">Simples e <br></br>rápido.</span>\r\n                    <p>Selecione suas fotos favoritas, recorte<br></br>\r\n                            no formato em que deseja e clique e<br></br> enviar. Pronto!\r\n                            Receberemos um aviso e<br></br> suas fotos começarão a ser impressas.\r\n                        </p>\r\n                </h2>\r\n            </div>\r\n            <div className=\"ContainerB_escolher\">\r\n                <input\r\n                    href=\"#ContainerT\"\r\n                    type=\"file\"\r\n                    ref={inputEscolher}\r\n                    accept='image/*'\r\n                    onChange={escolherImg}\r\n                    onClick={() => setBloco1(true)}\r\n                    style={{ display: 'none' }}\r\n                />\r\n                <button\r\n                    className=\"Btn\"\r\n                    onClick={refbtnEscolher}\r\n                >Escolher imagem</button>\r\n            </div>\r\n        </div>\r\n\r\n        <hr className=\"lin\" id=\"ContainerT\" />\r\n        {/* ----------------------------------------------Fim do 1°Container------------------------------------------------------ */}\r\n\r\n        <div className=\"ContainerTwo\">\r\n            <div className=\"container-cropper\" >\r\n                {image ? (\r\n                    <>\r\n                        <div className='cropper'>\r\n                            <Cropper\r\n                                image={image}\r\n                                crop={crop}\r\n                                zoom={zoom}\r\n                                aspect={1}\r\n                                onCropChange={setCrop}\r\n                                onZoomChange={setZoom}\r\n                                onCropComplete={onCropComplete}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className='slider'>\r\n                            <Slider\r\n                                min={1}\r\n                                max={6}\r\n                                step={0.1}\r\n                                value={zoom}\r\n                                onChange={(e, zoom) => setZoom(zoom)}\r\n                                color='secondary'\r\n                            />\r\n                        </div>\r\n\r\n                        {/* Salva e lista a imagem */}\r\n                        <Button\r\n                            className=\"Btn\"\r\n                            onClick={() => setImage(false)}\r\n                        >salvar imagem cortada </Button>\r\n                    </>\r\n                ) : null}\r\n\r\n            </div>\r\n\r\n            <div className=\"blocos\">\r\n                {bloco1 ? (\r\n                    <>\r\n                        <div className=\"bloco\">\r\n                            <div className=\"imagem\">\r\n                                {/* lista a imagem no bloco */}\r\n                                <img src={state.selectedFile} />\r\n                            </div>\r\n                            <div className=\"container-buttons\">\r\n                                {/* botão excluir */}\r\n                                <Button >Excluir</Button>\r\n\r\n                                {/* Abre o cortar imagem */}\r\n                                <input\r\n                                    type=\"file\"\r\n                                    ref={inputCortar}\r\n                                    accept='image/*'\r\n                                    style={{ display: 'none' }}\r\n                                    onChange={AbrirCrop}\r\n                                />\r\n                                <Button\r\n                                    onClick={refCortar}\r\n                                >Cortar</Button>\r\n                                {/* Abre o input para a frase da foto */}\r\n                                <Button\r\n                                    onClick={() => setModalShow(true)}>\r\n                                    Frase\r\n                                    </Button>\r\n                                <ModalFrase\r\n                                    show={modalShow}\r\n                                    onHide={() => setModalShow(false)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        \r\n\r\n                        <div className=\"container-buttons botaosalvar\">\r\n\r\n                            {<p>Você ainda pode escolher {limitador} imagens</p>}\r\n                            <div className=\"container-salvar\">\r\n                                <input\r\n                                    href=\"#ContainerT\"\r\n                                    ref={inputLimit}\r\n                                    style={{ display: 'none' }}\r\n                                ></input>\r\n                                <Button className=\"btn\" type=\"submit\" onClick={uparImg} onChange={refLimit}>Salvar e enviar</Button>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </>\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n\r\n        <div id=\"contact\" />\r\n        <div id=\"doubt\" />\r\n        <Footer />\r\n    </div>\r\n)\r\n}\r\nexport default UploadImagem;\r\n\r\n\r\n","C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\index.js",[],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Pagamento\\index.jsx",[],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\reportWebVitals.js",[],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\components\\TrackingEvents\\index.js",[],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\Carrinho\\index.jsx",["56","57"],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\components\\Header\\index.jsx",[],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\pages\\LoginCadastro\\index.jsx",["58"],"C:\\Users\\000\\Documents\\GitHub\\React_PixFourFun\\pix4fun\\src\\components\\Footer\\index.jsx",["59","60","61","62","63","64"],{"ruleId":"65","severity":1,"message":"66","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":25},{"ruleId":"65","severity":1,"message":"69","line":4,"column":27,"nodeType":"67","messageId":"68","endLine":4,"endColumn":33},{"ruleId":"65","severity":1,"message":"69","line":10,"column":27,"nodeType":"67","messageId":"68","endLine":10,"endColumn":33},{"ruleId":"65","severity":1,"message":"70","line":10,"column":35,"nodeType":"67","messageId":"68","endLine":10,"endColumn":39},{"ruleId":"65","severity":1,"message":"71","line":17,"column":17,"nodeType":"67","messageId":"68","endLine":17,"endColumn":23},{"ruleId":"65","severity":1,"message":"72","line":23,"column":21,"nodeType":"67","messageId":"68","endLine":23,"endColumn":33},{"ruleId":"73","severity":1,"message":"74","line":70,"column":23,"nodeType":"75","messageId":"76","endLine":70,"endColumn":25},{"ruleId":"73","severity":1,"message":"74","line":75,"column":25,"nodeType":"75","messageId":"76","endLine":75,"endColumn":27},{"ruleId":"73","severity":1,"message":"74","line":78,"column":30,"nodeType":"75","messageId":"76","endLine":78,"endColumn":32},{"ruleId":"73","severity":1,"message":"74","line":81,"column":30,"nodeType":"75","messageId":"76","endLine":81,"endColumn":32},{"ruleId":"73","severity":1,"message":"74","line":89,"column":27,"nodeType":"75","messageId":"76","endLine":89,"endColumn":29},{"ruleId":"73","severity":1,"message":"74","line":99,"column":36,"nodeType":"75","messageId":"76","endLine":99,"endColumn":38},{"ruleId":"77","severity":1,"message":"78","line":233,"column":33,"nodeType":"79","endLine":233,"endColumn":65},{"ruleId":"65","severity":1,"message":"66","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":25},{"ruleId":"65","severity":1,"message":"80","line":9,"column":24,"nodeType":"67","messageId":"68","endLine":9,"endColumn":37},{"ruleId":"65","severity":1,"message":"81","line":82,"column":13,"nodeType":"67","messageId":"68","endLine":82,"endColumn":20},{"ruleId":"65","severity":1,"message":"82","line":11,"column":10,"nodeType":"67","messageId":"68","endLine":11,"endColumn":14},{"ruleId":"65","severity":1,"message":"83","line":11,"column":16,"nodeType":"67","messageId":"68","endLine":11,"endColumn":23},{"ruleId":"65","severity":1,"message":"84","line":12,"column":10,"nodeType":"67","messageId":"68","endLine":12,"endColumn":15},{"ruleId":"65","severity":1,"message":"85","line":12,"column":17,"nodeType":"67","messageId":"68","endLine":12,"endColumn":25},{"ruleId":"65","severity":1,"message":"86","line":13,"column":10,"nodeType":"67","messageId":"68","endLine":13,"endColumn":18},{"ruleId":"65","severity":1,"message":"87","line":13,"column":20,"nodeType":"67","messageId":"68","endLine":13,"endColumn":31},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Link' is defined but never used.","'setDes' is assigned a value but never used.","'setQntdItens' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setListarImgs' is assigned a value but never used.","'usuario' is assigned a value but never used.","'nome' is assigned a value but never used.","'setNome' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'mensagem' is assigned a value but never used.","'setMensagem' is assigned a value but never used."]